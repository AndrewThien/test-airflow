name: test-airflow

services:
  db:
    image: postgres:13
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
      # TODO: add the notice for dev to create airflow manually or drop the db-data and start again
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
  webserver:
    build:
      context: airflow
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      # Update this connection string to point to your remote PostgreSQL
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@db:5432/postgres?options=-csearch_path%3Dairflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_SCHEMA: airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080
      AIRFLOW__WEBSERVER__SECRET_KEY: "test"
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW_CONN_POSTGRES_DB_CONN: postgresql+psycopg2://postgres:postgres@db:5432/postgres
      AIRFLOW_CONN_MINIO_CONN: aws://minioadmin:minioadmin@/?endpoint_url=http://minio:9000
      AIRFLOW_CONN_WASB__CONN:
        wasb://DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
        # TODO: enable CORS on production
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      # TODO: decide which method to set Airflow config, if using the below, set it in the Dockerfile
      # - ./app/airflow/config/airflow.cfg:/opt/airflow/airflow.cfg
    ports:
      - "8080:8080"
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --password admin --firstname Air --lastname Flow --role Admin --email admin@example.com &&
      airflow webserver"

  scheduler:
    build:
      context: airflow
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      # Update this connection string to point to your remote PostgreSQL
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@db:5432/postgres?options=-csearch_path%3Dairflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_SCHEMA: airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: "test"
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW_CONN_POSTGRES_DB_CONN: postgresql+psycopg2://postgres:postgres@db:5432/postgres
      AIRFLOW_CONN_MINIO_CONN: aws://minioadmin:minioadmin@/?endpoint_url=http://minio:9000
      AIRFLOW_CONN_WASB__CONN: wasb://DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
      # TODO: enable CORS on production
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      # TODO: decide which method to set Airflow config, if using the below, set it in the Dockerfile
      # - ./app/airflow/config/airflow.cfg:/opt/airflow/airflow.cfg
    command: airflow scheduler

volumes:
  db_data:
